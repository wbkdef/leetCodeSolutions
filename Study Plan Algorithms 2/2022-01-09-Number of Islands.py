"""
From: https://leetcode.com/problems/subarray-product-less-than-k/
"""

from typing import Optional


class Solution:
    def get(self, loc: tuple[int, int]) -> Optional[str]:
        """ Return 0, 1 if location valid, else None """
        if loc[0] < 0 or loc[1] < 0:
            return None
        try:
            return self.grid[loc[0]][loc[1]]
        except IndexError:
            return None

    def get_neighbors(self, loc: tuple[int, int])  ->  list[tuple[int, int]]:
        x, y = loc
        locs = {
            (x + 1, y),
            (x - 1, y),
            (x, y + 1),
            (x, y - 1),
        }
        return [xy for xy in locs
                if self.get(xy)]

    def numIslands(self, grid: list[list[str]]) -> int:
        self.grid = grid
        already_explored = set()
        num_islands = 0

        for row_num, row in enumerate(grid):
            for col_num, num in enumerate(row):
                loc = (row_num, col_num)
                if num == "0" or loc in already_explored:
                    continue
                assert num == "1"

                num_islands += 1
                # already_explored.add(loc)
                to_explore = [loc]
                island = {loc}
                while to_explore:
                    loc2 = to_explore.pop(0)
                    if self.get(loc2) == "1":
                        island.add(loc2)
                        if loc2 in already_explored:
                            continue
                        already_explored.add(loc2)
                        to_explore.extend(self.get_neighbors(loc2))
                # print(f"island is {sorted(island)}")

        return num_islands


if __name__ == "__main__":
    res = Solution().numIslands([
      ["1","1","1","1","0"],
      ["1","1","0","1","0"],
      ["1","1","0","0","0"],
      ["0","0","0","0","0"]
    ])
    assert res == 1

    res = Solution().numIslands([
      ["1","1","0","0","0"],
      ["1","1","0","0","0"],
      ["0","0","1","0","0"],
      ["0","0","0","1","1"]
    ])
    assert res == 3

    print(f"\nStarting big one")
    res = Solution().numIslands([
        ["0","0","1","0","0","1","0","0","0","0","0","0","0","0","1","1","0","1","0","0"], # 4
        ["0","1","0","0","0","0","1","1","0","0","0","1","0","0","1","1","0","0","0","0"],
        ["1","0","1","1","0","0","0","0","0","1","0","0","0","1","0","1","1","1","1","0"],
        ["1","1","0","0","0","0","0","0","0","0","1","0","0","1","1","1","1","1","1","1"],
        ["0","0","0","0","0","1","0","0","0","1","1","1","1","0","1","0","0","0","0","0"],
        ["0","1","1","1","0","0","0","1","0","1","0","1","0","0","1","0","1","1","0","0"],
        ["0","0","0","0","0","0","0","0","1","1","1","0","0","1","1","0","0","0","0","0"],
        ["0","1","1","0","0","0","0","0","1","0","1","1","0","1","1","0","0","1","0","0"],
        ["0","0","1","1","1","0","0","1","0","0","0","0","0","0","0","1","1","1","0","1"],
        ["1","1","0","0","0","1","0","1","0","0","0","1","1","0","0","1","0","1","1","0"],
        ["0","0","0","0","0","0","1","0","1","1","0","0","1","0","1","1","1","1","0","1"],
        ["0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","0","0","1","0","1"],
        ["0","1","0","0","0","0","0","1","0","0","0","0","0","0","1","1","1","0","0","0"],
        ["0","0","1","0","1","0","0","1","1","0","1","1","1","0","0","1","1","0","0","1"],
        ["1","0","1","0","1","0","1","0","0","0","0","0","0","0","1","0","0","1","1","0"],
        ["1","0","1","1","1","0","1","0","0","0","0","0","0","1","0","0","0","0","1","1"],
        ["1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","0","0","1","1"],
        ["0","0","0","0","0","0","1","0","0","0","1","0","1","0","1","1","0","1","0","1"],
        ["1","0","0","1","0","0","0","0","0","0","1","0","0","0","0","0","1","1","1","1"],
        ["0","0","0","1","1","0","0","0","0","0","0","0","0","1","0","0","0","1","0","0"]
    ])
    assert res == 45

    print(f"all done")
